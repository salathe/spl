digraph "Iterator"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{Iterator\n||+ current()\l+ key()\l+ next()\l+ rewind()\l+ valid()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{Traversable\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfaceTraversable.html",tooltip="Interface to detect a class is traversable using foreach. "];
  Node1 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{DbaReader\n|# $db\l- $key\l- $val\l|+ __construct()\l+ __destruct()\l+ current()\l+ key()\l+ next()\l+ rewind()\l+ valid()\l- fetch_data()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classDbaReader.html",tooltip="This implements a DBA Iterator. "];
  Node3 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{DbaArray\n||+ __construct()\l+ __destruct()\l+ offsetExists()\l+ offsetGet()\l+ offsetSet()\l+ offsetUnset()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classDbaArray.html",tooltip="This implements a DBA Array. "];
  Node1 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{DirectoryIterator\n||+ __construct()\l+ __toString()\l+ current()\l+ isDot()\l+ isLink()\l+ key()\l+ next()\l+ rewind()\l+ valid()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classDirectoryIterator.html",tooltip="Directory iterator. "];
  Node5 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{RecursiveDirectoryIterator\n|+ CURRENT_AS_FILEINFO\l+ CURRENT_AS_PATHNAME\l+ CURRENT_AS_SELF\l+ KEY_AS_FILENAME\l+ KEY_AS_PATHNAME\l+ NEW_CURRENT_AND_KEY\l|+ __construct()\l+ current()\l+ getChildren()\l+ getSubPath()\l+ getSubPathname()\l+ hasChildren()\l+ key()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRecursiveDirectoryIterator.html",tooltip="recursive directory iterator "];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node7 [label="{DualIterator\n|+ CURRENT_0\l+ CURRENT_ARRAY\l+ CURRENT_LHS\l+ CURRENT_RHS\l+ DEFAULT_FLAGS\l+ KEY_0\l+ KEY_LHS\l+ KEY_RHS\l- $flags\l- $lhs\l- $rhs\l|+ __construct()\l+ areEqual()\l+ areIdentical()\l+ current()\l+ getFlags()\l+ getLHS()\l+ getRHS()\l+ key()\l+ next()\l+ rewind()\l+ setFlags()\l+ valid()\l+ compareIterators()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classDualIterator.html",tooltip="Synchronous iteration over two iterators. "];
  Node7 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node8 [label="{RecursiveDualIterator\n|- $ref\l|+ __construct()\l+ areEqual()\l+ areIdentical()\l+ getChildren()\l+ hasChildren()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRecursiveDualIterator.html",tooltip="Synchronous iteration over two recursive iterators. "];
  Node1 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node9 [label="{EmptyIterator\n||+ current()\l+ key()\l+ next()\l+ rewind()\l+ valid()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEmptyIterator.html",tooltip="An empty Iterator. "];
  Node1 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node10 [label="{MultipleIterator\n|+ MIT_KEYS_ASSOC\l+ MIT_KEYS_NUMERIC\l+ MIT_NEED_ALL\l+ MIT_NEED_ANY\l- $flags\l- $iterators\l|+ __construct()\l+ attachIterator()\l+ containsIterator()\l+ countIterators()\l+ current()\l+ detachIterator()\l+ getFlags()\l+ key()\l+ next()\l+ rewind()\l+ setFlags()\l+ valid()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classMultipleIterator.html",tooltip="Iterator that iterates over several iterators one after the other. "];
  Node1 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node11 [label="{OuterIterator\n||+ getInnerIterator()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfaceOuterIterator.html",tooltip="Interface to access the current inner iteraor of iterator wrappers. "];
  Node11 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node12 [label="{AppendIterator\n|- $iterators\l|+ __call()\l+ __construct()\l+ append()\l+ current()\l+ getInnerIterator()\l+ key()\l+ next()\l+ rewind()\l+ valid()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classAppendIterator.html",tooltip="Iterator that iterates over several iterators one after the other. "];
  Node11 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node13 [label="{CachingIterator\n|+ CALL_TOSTRING\l+ CATCH_GET_CHILD\l+ TOSTRING_USE_CURRENT\l+ TOSTRING_USE_KEY\l- $current\l- $it\l- $key\l- $strValue\l- $valid\l|+ __call()\l+ __construct()\l+ __toString()\l+ current()\l+ getInnerIterator()\l+ hasNext()\l+ key()\l+ next()\l+ rewind()\l+ valid()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classCachingIterator.html",tooltip="Cached iteration over another Iterator. "];
  Node13 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node14 [label="{RecursiveCachingIterator\n|+ getChildren\l- $getChildren\l- $hasChildren\l- $ref\l|+ __construct()\l+ getChildren()\l+ hasChildren()\l+ next()\l+ rewind()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRecursiveCachingIterator.html",tooltip="Cached recursive iteration over another Iterator. "];
  Node14 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node15 [label="{CachingRecursiveIterator\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classCachingRecursiveIterator.html",tooltip="Compatibility to PHP 5.0. "];
  Node11 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node16 [label="{FilterIterator\n|- $it\l|+ __call()\l+ __construct()\l+ accept()\l+ current()\l+ getInnerIterator()\l+ key()\l+ next()\l+ rewind()\l+ valid()\l# __clone()\l# fetch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classFilterIterator.html",tooltip="Abstract filter for iterators. "];
  Node16 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node17 [label="{CallbackFilterIterator\n|+ REPLACE\l+ USE_BOTH\l+ USE_FALSE\l+ USE_KEY\l+ USE_TRUE\l+ USE_VALUE\l- $callback\l- $current\l- $flags\l- $key\l- $mode\l|+ __construct()\l+ accept()\l+ current()\l+ getFlags()\l+ getMode()\l+ key()\l+ setFlags()\l+ setMode()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classCallbackFilterIterator.html",tooltip="A non abstract FiletrIterator that uses a callback foreach element. "];
  Node16 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node18 [label="{FindFile\n|- $file\l|+ __construct()\l+ accept()\l+ getSearch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classFindFile.html",tooltip="Base class to find files. "];
  Node18 -> Node19 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node19 [label="{RegexFindFile\n||+ __construct()\l+ accept()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRegexFindFile.html",tooltip="Find files by regular expression. "];
  Node16 -> Node20 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node20 [label="{KeyFilter\n|- $regex\l|+ __construct()\l+ accept()\l+ getRegex()\l# __clone()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classKeyFilter.html",tooltip="Regular expression filter for string iterators. "];
  Node20 -> Node21 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node21 [label="{IniGroups\n||+ __construct()\l+ current()\l+ key()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classIniGroups.html",tooltip="Class to iterate all groups within an ini file. "];
  Node16 -> Node22 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node22 [label="{RecursiveFilterIterator\n|- $ref\l|+ __construct()\l+ getChildren()\l+ hasChildren()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRecursiveFilterIterator.html",tooltip="Iterator to filter recursive iterators. "];
  Node22 -> Node23 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node23 [label="{DirectoryFilterDots\n||+ __construct()\l+ accept()\l+ key()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classDirectoryFilterDots.html",tooltip="A filtered DirectoryIterator. "];
  Node22 -> Node24 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node24 [label="{NoCvsDirectory\n||+ __construct()\l+ accept()\l+ getChildren()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classNoCvsDirectory.html"];
  Node22 -> Node25 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node25 [label="{ParentIterator\n||+ accept()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classParentIterator.html",tooltip="Iterator to filter parents. "];
  Node16 -> Node26 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node26 [label="{RegexIterator\n|+ ALL_MATCHES\l+ GET_MATCH\l+ MATCH\l+ REPLACE\l+ SPLIT\l+ USE_KEY\l- $current\l- $flags\l- $key\l- $mode\l- $preg_flags\l- $regex\l|+ __construct()\l+ accept()\l+ current()\l+ getFlags()\l+ getMode()\l+ getPregFlags()\l+ getRegex()\l+ key()\l+ setFlags()\l+ setMode()\l+ setPregFlags()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRegexIterator.html",tooltip="Regular expression filter for iterators. "];
  Node26 -> Node27 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node27 [label="{RecursiveRegexIterator\n|- $ref\l|+ __construct()\l+ getChildren()\l+ hasChildren()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRecursiveRegexIterator.html",tooltip="Recursive regular expression filter for iterators. "];
  Node16 -> Node28 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node28 [label="{SearchIterator\n|- $done\l|+ __call()\l+ next()\l+ rewind()\l+ valid()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classSearchIterator.html",tooltip="Iterator to search for a specific element. "];
  Node11 -> Node29 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node29 [label="{IteratorIterator\n|- $iterator\l|+ __call()\l+ __construct()\l+ current()\l+ getInnerIterator()\l+ key()\l+ next()\l+ rewind()\l+ valid()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classIteratorIterator.html",tooltip="Basic Iterator wrapper. "];
  Node29 -> Node30 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node30 [label="{InfiniteIterator\n||+ next()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classInfiniteIterator.html",tooltip="An infinite Iterator. "];
  Node29 -> Node31 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node31 [label="{NoRewindIterator\n||+ rewind()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classNoRewindIterator.html",tooltip="An Iterator wrapper that doesn&#39;t call rewind. "];
  Node11 -> Node32 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node32 [label="{LimitIterator\n|- $count\l- $it\l- $offset\l- $pos\l|+ __call()\l+ __construct()\l+ current()\l+ getInnerIterator()\l+ getPosition()\l+ key()\l+ next()\l+ rewind()\l+ seek()\l+ valid()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classLimitIterator.html",tooltip="Limited Iteration over another Iterator. "];
  Node11 -> Node33 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node33 [label="{RecursiveIteratorIterator\n|+ CATCH_GET_CHILD\l+ CHILD_FIRST\l+ LEAVES_ONLY\l+ SELF_FIRST\l- $ait\l- $count\l- $flags\l- $mode\l|+ __construct()\l+ beginChildren()\l+ callGetChildren()\l+ callHasChildren()\l+ current()\l+ endChildren()\l+ getDepth()\l+ getInnerIterator()\l+ getSubIterator()\l+ key()\l+ next()\l+ nextElement()\l+ rewind()\l+ valid()\l- callNextElement()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRecursiveIteratorIterator.html",tooltip="Iterates through recursive iterators. "];
  Node33 -> Node34 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node34 [label="{DirectoryTree\n||+ __construct()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classDirectoryTree.html",tooltip="A directory iterator that does not show &#39;. "];
  Node33 -> Node35 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node35 [label="{DirectoryTreeIterator\n||+ __call()\l+ __construct()\l+ current()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classDirectoryTreeIterator.html",tooltip="DirectoryIterator to generate ASCII graphic directory trees. "];
  Node35 -> Node36 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node36 [label="{DirectoryGraphIterator\n||+ __construct()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classDirectoryGraphIterator.html",tooltip="A tree iterator that only shows directories. "];
  Node33 -> Node37 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node37 [label="{RecursiveCompareDualIterator\n|# $equal\l|+ __construct()\l+ areEqual()\l+ areIdentical()\l+ endChildren()\l+ rewind()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRecursiveCompareDualIterator.html",tooltip="Recursive comparison iterator for a RecursiveDualIterator. "];
  Node33 -> Node38 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node38 [label="{RecursiveTreeIterator\n|+ BYPASS_CURRENT\l+ BYPASS_KEY\l+ PREFIX_END_HAS_NEXT\l+ PREFIX_END_LAST\l+ PREFIX_LEFT\l+ PREFIX_MID_HAS_NEXT\l+ PREFIX_MID_LAST\l+ PREFIX_RIGHT\l- $prefix\l- $rit_flags\l|+ __call()\l+ __construct()\l+ current()\l+ getEntry()\l+ getPostfix()\l+ getPrefix()\l+ key()\l+ setPrefixPart()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRecursiveTreeIterator.html",tooltip="RecursiveIteratorIterator to generate ASCII graphic trees for the entries in a RecursiveIterator. "];
  Node1 -> Node39 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node39 [label="{RecursiveIterator\n||+ getChildren()\l+ hasChildren()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfaceRecursiveIterator.html",tooltip="Interface for recursive iteration with RecursiveIteratorIterator. "];
  Node39 -> Node40 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node40 [label="{RecursiveArrayIterator\n|- $ref\l|+ getChildren()\l+ hasChildren()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRecursiveArrayIterator.html",tooltip="A recursive array iterator. "];
  Node40 -> Node41 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node41 [label="{SubClasses\n||+ __construct()\l+ current()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classSubClasses.html",tooltip="Collects sub classes for given class or interface. "];
  Node39 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node39 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node39 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node39 -> Node22 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node39 -> Node27 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node39 -> Node42 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node42 [label="{SimpleXMLIterator\n||+ count()\l+ current()\l+ getChildren()\l+ hasChildren()\l+ key()\l+ next()\l+ rewind()\l+ valid()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classSimpleXMLIterator.html",tooltip="recursive SimpleXML_Element iterator "];
  Node39 -> Node43 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node43 [label="{SplFileObject\n|+ DROP_NEW_LINE\l- $delimiter\l- $enclosure\l- $flags\l- $fname\l- $fp\l- $line\l- $lnum\l- $max_len\l|+ __construct()\l+ __toString()\l+ current()\l+ eof()\l+ fflush()\l+ fgetc()\l+ fgetcsv()\l+ fgets()\l+ fgetss()\l+ flock()\land 21 more...\l- freeLine()\l- readLine()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classSplFileObject.html",tooltip="Object representation for any stream. "];
  Node1 -> Node44 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node44 [label="{SeekableIterator\n||+ seek()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfaceSeekableIterator.html",tooltip="seekable iterator "];
  Node44 -> Node45 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node45 [label="{ArrayIterator\n|+ ARRAY_AS_PROPS\l+ STD_PROP_LIST\l|+ __construct()\l+ append()\l+ asort()\l+ count()\l+ current()\l+ getArrayCopy()\l+ getFlags()\l+ key()\l+ ksort()\l+ natcasesort()\land 12 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classArrayIterator.html",tooltip="An Array iterator. "];
  Node45 -> Node40 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node44 -> Node43 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node1 -> Node46 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node46 [label="{SplDoublyLinkedList\n|+ IT_MODE_DELETE\l+ IT_MODE_FIFO\l+ IT_MODE_KEEP\l+ IT_MODE_LIFO\l# $_it_mode\l# $_it_pos\l# $_llist\l|+ bottom()\l+ count()\l+ current()\l+ getIteratorMode()\l+ isEmpty()\l+ key()\l+ next()\l+ offsetExists()\l+ offsetGet()\l+ offsetSet()\land 9 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classSplDoublyLinkedList.html",tooltip="Doubly Linked List. "];
  Node46 -> Node47 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node47 [label="{SplQueue\n|# $_it_mode\l|+ dequeue()\l+ enqueue()\l+ setIteratorMode()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classSplQueue.html",tooltip="Implementation of a Queue through a DoublyLinkedList. "];
  Node46 -> Node48 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node48 [label="{SplStack\n|# $_it_mode\l|+ setIteratorMode()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classSplStack.html",tooltip="Implementation of a stack through a DoublyLinkedList. "];
  Node1 -> Node49 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node49 [label="{SplObjectStorage\n|- $index\l- $storage\l|+ attach()\l+ contains()\l+ count()\l+ current()\l+ detach()\l+ getInfo()\l+ key()\l+ next()\l+ offsetEsists()\l+ offsetGet()\l+ offsetSet()\l+ offsetUnset()\l+ rewind()\l+ setInfo()\l+ valid()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classSplObjectStorage.html",tooltip="Object storage. "];
}

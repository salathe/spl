digraph "OuterIterator"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{OuterIterator\n||+ getInnerIterator()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{Iterator\n||+ current()\l+ key()\l+ next()\l+ rewind()\l+ valid()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfaceIterator.html",tooltip="Basic iterator. "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{Traversable\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfaceTraversable.html",tooltip="Interface to detect a class is traversable using foreach. "];
  Node1 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{AppendIterator\n|- $iterators\l|+ __call()\l+ __construct()\l+ append()\l+ current()\l+ getInnerIterator()\l+ key()\l+ next()\l+ rewind()\l+ valid()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classAppendIterator.html",tooltip="Iterator that iterates over several iterators one after the other. "];
  Node1 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{CachingIterator\n|+ CALL_TOSTRING\l+ CATCH_GET_CHILD\l+ TOSTRING_USE_CURRENT\l+ TOSTRING_USE_KEY\l- $current\l- $it\l- $key\l- $strValue\l- $valid\l|+ __call()\l+ __construct()\l+ __toString()\l+ current()\l+ getInnerIterator()\l+ hasNext()\l+ key()\l+ next()\l+ rewind()\l+ valid()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classCachingIterator.html",tooltip="Cached iteration over another Iterator. "];
  Node5 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{RecursiveCachingIterator\n|+ getChildren\l- $getChildren\l- $hasChildren\l- $ref\l|+ __construct()\l+ getChildren()\l+ hasChildren()\l+ next()\l+ rewind()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRecursiveCachingIterator.html",tooltip="Cached recursive iteration over another Iterator. "];
  Node6 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node7 [label="{CachingRecursiveIterator\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classCachingRecursiveIterator.html",tooltip="Compatibility to PHP 5.0. "];
  Node1 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node8 [label="{FilterIterator\n|- $it\l|+ __call()\l+ __construct()\l+ accept()\l+ current()\l+ getInnerIterator()\l+ key()\l+ next()\l+ rewind()\l+ valid()\l# __clone()\l# fetch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classFilterIterator.html",tooltip="Abstract filter for iterators. "];
  Node8 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node9 [label="{CallbackFilterIterator\n|+ REPLACE\l+ USE_BOTH\l+ USE_FALSE\l+ USE_KEY\l+ USE_TRUE\l+ USE_VALUE\l- $callback\l- $current\l- $flags\l- $key\l- $mode\l|+ __construct()\l+ accept()\l+ current()\l+ getFlags()\l+ getMode()\l+ key()\l+ setFlags()\l+ setMode()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classCallbackFilterIterator.html",tooltip="A non abstract FiletrIterator that uses a callback foreach element. "];
  Node8 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node10 [label="{FindFile\n|- $file\l|+ __construct()\l+ accept()\l+ getSearch()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classFindFile.html",tooltip="Base class to find files. "];
  Node10 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node11 [label="{RegexFindFile\n||+ __construct()\l+ accept()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRegexFindFile.html",tooltip="Find files by regular expression. "];
  Node8 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node12 [label="{KeyFilter\n|- $regex\l|+ __construct()\l+ accept()\l+ getRegex()\l# __clone()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classKeyFilter.html",tooltip="Regular expression filter for string iterators. "];
  Node12 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node13 [label="{IniGroups\n||+ __construct()\l+ current()\l+ key()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classIniGroups.html",tooltip="Class to iterate all groups within an ini file. "];
  Node8 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node14 [label="{RecursiveFilterIterator\n|- $ref\l|+ __construct()\l+ getChildren()\l+ hasChildren()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRecursiveFilterIterator.html",tooltip="Iterator to filter recursive iterators. "];
  Node14 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node15 [label="{DirectoryFilterDots\n||+ __construct()\l+ accept()\l+ key()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classDirectoryFilterDots.html",tooltip="A filtered DirectoryIterator. "];
  Node14 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node16 [label="{NoCvsDirectory\n||+ __construct()\l+ accept()\l+ getChildren()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classNoCvsDirectory.html"];
  Node14 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node17 [label="{ParentIterator\n||+ accept()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classParentIterator.html",tooltip="Iterator to filter parents. "];
  Node8 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node18 [label="{RegexIterator\n|+ ALL_MATCHES\l+ GET_MATCH\l+ MATCH\l+ REPLACE\l+ SPLIT\l+ USE_KEY\l- $current\l- $flags\l- $key\l- $mode\l- $preg_flags\l- $regex\l|+ __construct()\l+ accept()\l+ current()\l+ getFlags()\l+ getMode()\l+ getPregFlags()\l+ getRegex()\l+ key()\l+ setFlags()\l+ setMode()\l+ setPregFlags()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRegexIterator.html",tooltip="Regular expression filter for iterators. "];
  Node18 -> Node19 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node19 [label="{RecursiveRegexIterator\n|- $ref\l|+ __construct()\l+ getChildren()\l+ hasChildren()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRecursiveRegexIterator.html",tooltip="Recursive regular expression filter for iterators. "];
  Node8 -> Node20 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node20 [label="{SearchIterator\n|- $done\l|+ __call()\l+ next()\l+ rewind()\l+ valid()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classSearchIterator.html",tooltip="Iterator to search for a specific element. "];
  Node1 -> Node21 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node21 [label="{IteratorIterator\n|- $iterator\l|+ __call()\l+ __construct()\l+ current()\l+ getInnerIterator()\l+ key()\l+ next()\l+ rewind()\l+ valid()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classIteratorIterator.html",tooltip="Basic Iterator wrapper. "];
  Node21 -> Node22 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node22 [label="{InfiniteIterator\n||+ next()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classInfiniteIterator.html",tooltip="An infinite Iterator. "];
  Node21 -> Node23 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node23 [label="{NoRewindIterator\n||+ rewind()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classNoRewindIterator.html",tooltip="An Iterator wrapper that doesn&#39;t call rewind. "];
  Node1 -> Node24 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node24 [label="{LimitIterator\n|- $count\l- $it\l- $offset\l- $pos\l|+ __call()\l+ __construct()\l+ current()\l+ getInnerIterator()\l+ getPosition()\l+ key()\l+ next()\l+ rewind()\l+ seek()\l+ valid()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classLimitIterator.html",tooltip="Limited Iteration over another Iterator. "];
  Node1 -> Node25 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node25 [label="{RecursiveIteratorIterator\n|+ CATCH_GET_CHILD\l+ CHILD_FIRST\l+ LEAVES_ONLY\l+ SELF_FIRST\l- $ait\l- $count\l- $flags\l- $mode\l|+ __construct()\l+ beginChildren()\l+ callGetChildren()\l+ callHasChildren()\l+ current()\l+ endChildren()\l+ getDepth()\l+ getInnerIterator()\l+ getSubIterator()\l+ key()\l+ next()\l+ nextElement()\l+ rewind()\l+ valid()\l- callNextElement()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRecursiveIteratorIterator.html",tooltip="Iterates through recursive iterators. "];
  Node25 -> Node26 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node26 [label="{DirectoryTree\n||+ __construct()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classDirectoryTree.html",tooltip="A directory iterator that does not show &#39;. "];
  Node25 -> Node27 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node27 [label="{DirectoryTreeIterator\n||+ __call()\l+ __construct()\l+ current()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classDirectoryTreeIterator.html",tooltip="DirectoryIterator to generate ASCII graphic directory trees. "];
  Node27 -> Node28 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node28 [label="{DirectoryGraphIterator\n||+ __construct()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classDirectoryGraphIterator.html",tooltip="A tree iterator that only shows directories. "];
  Node25 -> Node29 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node29 [label="{RecursiveCompareDualIterator\n|# $equal\l|+ __construct()\l+ areEqual()\l+ areIdentical()\l+ endChildren()\l+ rewind()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRecursiveCompareDualIterator.html",tooltip="Recursive comparison iterator for a RecursiveDualIterator. "];
  Node25 -> Node30 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node30 [label="{RecursiveTreeIterator\n|+ BYPASS_CURRENT\l+ BYPASS_KEY\l+ PREFIX_END_HAS_NEXT\l+ PREFIX_END_LAST\l+ PREFIX_LEFT\l+ PREFIX_MID_HAS_NEXT\l+ PREFIX_MID_LAST\l+ PREFIX_RIGHT\l- $prefix\l- $rit_flags\l|+ __call()\l+ __construct()\l+ current()\l+ getEntry()\l+ getPostfix()\l+ getPrefix()\l+ key()\l+ setPrefixPart()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classRecursiveTreeIterator.html",tooltip="RecursiveIteratorIterator to generate ASCII graphic trees for the entries in a RecursiveIterator. "];
}
